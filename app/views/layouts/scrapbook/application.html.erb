<!DOCTYPE html>
<html>
<head>
  <title><%= local_assigns[:scrapbook]&.name || 'Scrapbook' %>: <%= content_for?(:title) ? yield(:title) : local_assigns[:pathname]&.basename %></title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag "scrapbook/application", media: "all", "data-turbo-track": "reload" %>
  <%= javascript_include_tag "scrapbook/application" %>
  <meta name="scrapbook-root" content="<%= root_path %>">
</head>
<body class="flex">
  <nav id="folder_listing" class="flex-none min-w-[20ch] max-w-[50%] h-screen overflow-scroll border-solid border-sky-700 border-0 border-r"><%= render 'layouts/scrapbook/folder_listing', scrapbook: local_assigns[:scrapbook], pathname: local_assigns[:pathname], nav_depth: 0 %></nav>
  <main class="py-2 px-4 h-screen w-screen overflow-scroll"><%= yield %></main>
  <script type="text/javascript">
  (() => {
    // On load, let's build out the nested tree
    const scrapbook_root_path = document.head.querySelector("meta[name=scrapbook-root]").content
    const paths = window.location.pathname.substring(scrapbook_root_path.length).split("/")
    if (paths.length > 1 || (paths.length === 1 && paths[0] !== "")) {
      fetch(scrapbook_root_path)
        .then((response) => response.text())
        .then((data) => {
          const root = document.createElement('html')
          const nav = document.getElementById('folder_listing')
          const frame = nav.querySelector('turbo-frame')

          root.innerHTML = data
          // Keep the nav element to keep listeners on it intact.
          nav.innerHTML = root.querySelector('#folder_listing').innerHTML
          setCurrent()

          openFolderPath(window.location.pathname, scrapbook_root_path + paths[0])
        })
        .catch((error) => {
          console.error("Unknown error:", error)
        })
    }

    function openFolderPath(path, currentSubPath = scrapbook_root_path) {
      const frame = document.querySelector('turbo-frame[src="' + currentSubPath + '"]')
      if (!frame) { return }

      if (path !== currentSubPath)
        frame.addEventListener('turbo:frame-render', () => {
          nextSegment = path.replace(currentSubPath + '/', '').split('/')[0]
          openFolderPath(path, currentSubPath + '/' + nextSegment)
        }, {once: true})
      frame.parentElement.open = true
    }

    // Update selection when a link is clicked
    document.getElementById("folder_listing").addEventListener('click', (e) => {
      const target = e.target
      if (target.tagName != 'A') { return }

      setCurrent(target)
    })

    // Every time a folder is opened, it's possible to be re-revealing the selected page.
    document.getElementById("folder_listing").addEventListener('turbo:frame-render', () => {
      setCurrent()
    })

    // Refresh trees when a folder is toggled back open
    // The first time a details element is toggled open, the turbo frame lazily loads. This
    // adds support for reloading whenever the element is closed and then re-opened. All
    // turbo frames of any nested folders are also refreshed.
    document.getElementById("folder_listing").addEventListener('toggle', (e) => {
      if (!e.target.open) { return }
      if ('loadedOnce' in e.target.dataset === false) {
        e.target.dataset.loadedOnce = true
        return
      }

      const idsToOpen = []
      e.target.querySelectorAll('details[open] > turbo-frame').forEach(elem => idsToOpen.push(elem.id))

      const firstFrame = document.getElementById(idsToOpen.shift())
      firstFrame.addEventListener('turbo:frame-render', () => {
        runOpenFor(idsToOpen)
      }, {once: true})
      firstFrame.reload()
    }, {capture: true})

    function runOpenFor(ids) {
      const idsLeft = []
      const framesFound = []

      ids.forEach((id) => {
        let frame = document.getElementById(id)
        !frame ? idsLeft.push(id) : framesFound.push(frame)
      })

      framesFound.forEach((frame) => {
        frame.addEventListener('turbo:frame-render', () => {
          runOpenFor(idsLeft)
        }, {once: true})
        frame.parentElement.open = true
      })
    }

    function setCurrent(link = document.querySelector('#folder_listing a[href="' + window.location.pathname + '"]')) {
      if (link === null) { return }

      oldSelection = document.querySelector('#folder_listing a[aria-current="page"]')
      if (oldSelection == link) { return }

      if (oldSelection) {
        oldSelection.classList.remove('bg-sky-100')
        oldSelection.removeAttribute('aria-current', 'page')
      }

      link.classList.add('bg-sky-100')
      link.setAttribute('aria-current', 'page')
    }
  })()
  </script>
</body>
</html>
